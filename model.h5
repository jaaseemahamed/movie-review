import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from sklearn.model_selection import train_test_split
import pandas as pd
# Read the data into a DataFrame
df = pd.read_csv(r"C:\Users\IRFAN MOOSA\Downloads\IMDB Dataset.csv")
df['review'] = df['review'].apply(lambda x: x.lower())
# Convert labels to numerical values
df['sentiment'] = df['sentiment'].apply(lambda x: 1 if x == 'positive' else 0)
reviews = df['review'].values
labels = df['sentiment'].values
X_train, X_test, y_train, y_test = train_test_split(reviews, labels, test_size=0.2, random_state=42)
tokenizer = Tokenizer(num_words=10000, oov_token="<OOV>")
tokenizer.fit_on_texts(X_train)

X_train_seq = tokenizer.texts_to_sequences(X_train)
X_test_seq = tokenizer.texts_to_sequences(X_test)

max_length = 200
X_train_padded=pad_sequences(X_train_seq,maxlen=max_length,padding='post',truncating='post')
X_test_padded=pad_sequences(X_test_seq, maxlen=max_length, padding='post', truncating='post')
model = tf.keras.Sequential([
    tf.keras.layers.Embedding(input_dim=10000, output_dim=64),
    tf.keras.layers.LSTM(64),
    tf.keras.layers.Dense(32, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')
])
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
history = model.fit(X_train_padded, y_train, epochs=2, validation_data=(X_test_padded, y_test),verbose=2, batch_size=64)
loss, accuracy = model.evaluate(X_test_padded, y_test)
print(f"Test Accuracy: {accuracy * 100:.2f}%")
def predict_sentiment(review):
    review = review.lower()
    review_seq = tokenizer.texts_to_sequences([review])
    review_padded = pad_sequences(review_seq, maxlen=max_length, padding='post')
    prediction = model.predict(review_padded)[0][0]
    sentiment = "positive" if prediction > 0.5 else "negative"
    print(f"  (Raw Score: {prediction:.4f})")
    return sentiment
while True:
    user_input = input("\nEnter a movie review (or type 'exit' to quit): ")
    if user_input.strip().lower() == 'exit':
        print("Goodbye!")
        break
    sentiment = predict_sentiment(user_input)
    print(f"Predicted Sentiment: {sentiment}")
import pickle

# Saving tokenizer
with open('tokenizer.pickle', 'wb') as handle:
    pickle.dump(tokenizer, handle, protocol=pickle.HIGHEST_PROTOCOL)

# Loading tokenizer
with open('tokenizer.pickle', 'rb') as handle:
    tokenizer = pickle.load(handle)
